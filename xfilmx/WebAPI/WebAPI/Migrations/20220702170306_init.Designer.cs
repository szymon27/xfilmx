// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20220702170306_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebAPI.Models.Celebritie", b =>
                {
                    b.Property<int>("CelebritieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CelebritieId"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnOrder(1);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(5);

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnOrder(4);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("CelebritieId");

                    b.ToTable("Celebrities");
                });

            modelBuilder.Entity("WebAPI.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebAPI.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(5);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("WebAPI.Models.Production", b =>
                {
                    b.Property<int>("ProductionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionId"), 1L, 1);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("date")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(6);

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsSerie")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("ProductionId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionActor", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CelebritieId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(2);

                    b.HasKey("ProductionId", "CelebritieId");

                    b.HasIndex("CelebritieId");

                    b.ToTable("ProductionActors");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionComment", b =>
                {
                    b.Property<int>("ProductionCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnOrder(4);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProductionCommentId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionComments");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionCountry", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("ProductionCountries");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionDirector", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CelebritieId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionId", "CelebritieId");

                    b.HasIndex("CelebritieId");

                    b.ToTable("ProductionDirectors");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionEpisod", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Season")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Episod")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.HasKey("ProductionId", "Season", "Episod");

                    b.ToTable("ProductionEpisods");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionGenre", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("ProductionGenres");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionPicture", b =>
                {
                    b.Property<int>("ProductionPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionPictureId"), 1L, 1);

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(2);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionPictureId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionPictures");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionRate", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Stars")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProductionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionRates");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionScreenwriter", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CelebritieId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionId", "CelebritieId");

                    b.HasIndex("CelebritieId");

                    b.ToTable("ProductionScreenwriters");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionTrailer", b =>
                {
                    b.Property<int>("ProductionTrailerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionTrailerId"), 1L, 1);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("ProductionTrailerId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionTrailers");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionWatchStatus", b =>
                {
                    b.Property<int>("ProductionId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("WatchStatus")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProductionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionWatchStatuses");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)")
                        .HasColumnOrder(4);

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(2);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.Models.News", b =>
                {
                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionActor", b =>
                {
                    b.HasOne("WebAPI.Models.Celebritie", "Celebritie")
                        .WithMany("ProductionActors")
                        .HasForeignKey("CelebritieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionActors")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celebritie");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionComment", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionComments")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany("ProductionComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionCountry", b =>
                {
                    b.HasOne("WebAPI.Models.Country", "Country")
                        .WithMany("ProductionCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionCountries")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionDirector", b =>
                {
                    b.HasOne("WebAPI.Models.Celebritie", "Celebritie")
                        .WithMany("ProductionDirectors")
                        .HasForeignKey("CelebritieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionDirectors")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celebritie");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionEpisod", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionEpisods")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionGenre", b =>
                {
                    b.HasOne("WebAPI.Models.Genre", "Genre")
                        .WithMany("ProductionGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionGenres")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionPicture", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionPictures")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionRate", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionRates")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany("ProductionRates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionScreenwriter", b =>
                {
                    b.HasOne("WebAPI.Models.Celebritie", "Celebritie")
                        .WithMany("ProductionScreenwriters")
                        .HasForeignKey("CelebritieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionScreenwriters")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Celebritie");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionTrailer", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionTrailers")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("WebAPI.Models.ProductionWatchStatus", b =>
                {
                    b.HasOne("WebAPI.Models.Production", "Production")
                        .WithMany("ProductionWatchStatuses")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany("ProductionWatchStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.Celebritie", b =>
                {
                    b.Navigation("ProductionActors");

                    b.Navigation("ProductionDirectors");

                    b.Navigation("ProductionScreenwriters");
                });

            modelBuilder.Entity("WebAPI.Models.Country", b =>
                {
                    b.Navigation("ProductionCountries");
                });

            modelBuilder.Entity("WebAPI.Models.Genre", b =>
                {
                    b.Navigation("ProductionGenres");
                });

            modelBuilder.Entity("WebAPI.Models.Production", b =>
                {
                    b.Navigation("ProductionActors");

                    b.Navigation("ProductionComments");

                    b.Navigation("ProductionCountries");

                    b.Navigation("ProductionDirectors");

                    b.Navigation("ProductionEpisods");

                    b.Navigation("ProductionGenres");

                    b.Navigation("ProductionPictures");

                    b.Navigation("ProductionRates");

                    b.Navigation("ProductionScreenwriters");

                    b.Navigation("ProductionTrailers");

                    b.Navigation("ProductionWatchStatuses");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Navigation("News");

                    b.Navigation("ProductionComments");

                    b.Navigation("ProductionRates");

                    b.Navigation("ProductionWatchStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
